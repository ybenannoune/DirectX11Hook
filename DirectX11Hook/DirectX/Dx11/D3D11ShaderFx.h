#ifndef _SHADERFX_H_
#define _SHADERFX_H_

#ifdef _MSC_VER
#pragma once
#endif

const char shaderRaw[] = "BlendState FillTechBlend\n"
    "{\n" 
    "    AlphaToCoverageEnable = FALSE;\n" 
    "    BlendEnable[0] = TRUE;\n" 
    "    SrcBlend = SRC_ALPHA;\n" 
    "    DestBlend = INV_SRC_ALPHA;\n" 
    "    BlendOp = ADD;\n" 
    "    SrcBlendAlpha = ONE;\n" 
    "    DestBlendAlpha = ZERO;\n" 
    "    BlendOpAlpha = ADD;\n" 
    "    RenderTargetWriteMask[0] = 0x0F;\n" 
    "};\n\n" 
    "DepthStencilState FillTechDepth\n" 
    "{\n" 
    "    DepthEnable = false;\n" 
    "};\n\n" 
    "struct VSOut\n" 
    "{\n" 
    "    float4 Col : COLOR;\n" 
    "    float4 Pos : SV_POSITION;\n" 
    "};\n\n" 
    "VSOut VS(float4 Col : COLOR, float4 Pos : POSITION)\n" 
    "{\n" 
    "    VSOut Output;\n" 
    "    Output.Pos = Pos;\n" 
    "    Output.Col = Col;\n" 
    "    return Output;\n" 
    "}\n\n" 
    "float4 PS(float4 Col : COLOR) : SV_TARGET\n" 
    "{\n" 
    "    return Col;\n" 
    "}\n\n" 
    "technique10 FillTech\n" 
    "{\n" 
    "    pass Pass_0\n" 
    "    {\n" 
    "        SetVertexShader(CompileShader(vs_4_0, VS( )));\n" 
    "        SetGeometryShader(NULL);\n" 
    "        SetPixelShader(CompileShader(ps_4_0, PS( )));\n" 
    "        SetDepthStencilState(FillTechDepth, 0);\n" 
    "        SetBlendState(FillTechBlend, float4(0.0f, 0.0f, 0.0f, 0.0f), 0xFFFFFFFF);\n" 
    "    }\n" 
    "}\n";  


const char SpriteFX[] = "Texture2D SpriteTex;"
"SamplerState samLinear {"
"     Filter = MIN_MAG_MIP_LINEAR;"
"     AddressU = WRAP;"
"     AddressV = WRAP;"
"};"
"struct VertexIn {"
"     float3 PosNdc : POSITION;"
"     float2 Tex    : TEXCOORD;"
"     float4 Color  : COLOR;"
"};"
"struct VertexOut {"
"     float4 PosNdc : SV_POSITION;"
"     float2 Tex    : TEXCOORD;"
"     float4 Color  : COLOR;"
"};"
"VertexOut VS(VertexIn vin) {"
"     VertexOut vout;"
"     vout.PosNdc = float4(vin.PosNdc, 1.0f);"
"     vout.Tex    = vin.Tex;"
"     vout.Color  = vin.Color;"
"     return vout;"
"};"
"float4 PS(VertexOut pin) : SV_Target {"
"     return pin.Color*SpriteTex.Sample(samLinear, pin.Tex);"
"};"
"technique11 SpriteTech {"
"     pass P0 {"
"         SetVertexShader( CompileShader( vs_5_0, VS( ) ) );"
"         SetHullShader( NULL );"
"         SetDomainShader( NULL );"
"         SetGeometryShader( NULL );"
"         SetPixelShader( CompileShader( ps_5_0, PS( ) ) );"
"     }"
"}";

#endif